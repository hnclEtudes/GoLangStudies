EXERCISE 2: Implement a reverse-proxy server that uses channels as semaphores
to protect a resource, in this case a server that does not perform well under
load.

The players:
Protector.go -- the reverse proxy server
SorryServer.go -- the underpowered server
harness.go -- hand-rolled test to throw requests at 
	the underpowered server or its reverse proxy

SorryServer.go implements a webserver that becomes progressively
slower and slower the more concurrent connections it handles.
It does this in a completely artifical way, by using a function
that sleeps for a random number of milliseconds, up to a given maximum.
If less than five concurrent requests are active, the longest it will
sleep is 5 milliseconds; if the concurrent connections rise to 100,
the maximum sleep become 750 milliseconds, and at 500 concurrent connections,
it shuts down.

Protector.go is the reverse proxy that only allows five requests in. Right
now if there are more than five, it will just block until a slot becomes
available.

harness.go is a hand-rolled test program that throws requests at the server
(or reverse proxy)

TO DO:
SorryServer.go: remove excess code with time and duration information

Protector.go: implement 503 handling for some upper bound of requests (499, one
less than the SorryServer's breaking point?)

harness.go: remove excess code, add comments.

Write tests using net/httptest.
